#+TITLE: Bluepill: a GCC/CMake build environment ..
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../static/worg.css" />
#+options: num:nil
# This will export a README.org file for Github, so that people that land in my repo know where to find the relevant webpage
#+BEGIN_SRC org :tangle README.org :exports none
  see description [[http://geokon-gh.github.io/bluepill/index.html][here]]
#+END_SRC

* Intro
In this guide we will setup a simple minimal blinky for the Bluepill: A very cheap board available from China with the =STM32F103C8T6= chip on it. They cost a smidge over one dollar each

[[file:bluepill.jpeg]]

I will have two versions - one using the CMSIS and one using the LL (explained below). The embedded community seems a bit allergic to CMake - but I'm quite allergic to Make, so hopefully this guide will provide something new.

starting our CMake file we write out the usual

#+BEGIN_SRC cmake :tangle CMakeLists.txt
  cmake_minimum_required(VERSION 3.0)
  project(blinky)
#+END_SRC

The blessed way of building things for the STM32 series chips is using their wizards - but it's possible to get the whole thing running just using GCC and OpenOCD - and that's what we're gunna try to get working by the end of this guide. People have ofcourse already done this before:

** Prior Art

- =dwelch67= has some great extremely minimal setups for the blue pilll on [[https://github.com/dwelch67/stm32_samples/tree/master/STM32F103C8T6][his github]]. He describes them extensively in a [[https://electronics.stackexchange.com/questions/30736/stm32f2-makefile-linker-script-and-start-up-file-combination-without-commercia][few places on Stack Overflow]]. Basically here he rolls his own .. everything. It's very greybeard. All the code is in your face - no libraries. Straight writting to registers. Definitely take a look!

- =PurpleAlien= has another setup - which is very close to what I'm doing. He described it [[https://www.purplealienplanet.com/node/69][on his website]] and the code is on the [[https://github.com/PurpleAlien/stm32-minimal][his github]]. It's a slightly different chip - but the steps should work almost identically for the =bluepill=.

- =satoshinm= has [[https://satoshinm.github.io/blog/171212_stm32_blue_pill_arm_development_board_first_look_bare_metal_programming.html][a wonderful guide]] where he guides you through all the challenges he had setting up his bluepill. It's long but very informative and I recommend reading it. He also has an accompanying repository where we has code for the blinky working using bare metal, the STM HAL and another 3rd party library. His code (the bare metal part especially) was absolutely invaluable for getting my setup up and running. Check out [[https://github.com/satoshinm/pill_blink][his github]] project.
* Anatomy of a build
** The Linker Script
When an application normally runs on a desktop machine it's generally running using virtual memory in a virtual application-specific address space. From the applications point of view it can manipulate it's own memory however it wants - and it's the operating system that then translates that into safe operations on the actually memory (for instance to insure that the applications doesn't touch any memory region it shouldn't)

On a simple microcontroller there is no operating system to manage the memory, and the memory is shared with other functionality - some addresses are reserved for peripherals, other addresses are for interrupts and reset bits, the stack and heap are allocated some device-specific place and there is also a split between ROM and RAM. 

Because of these new limitations we can't just start executing code at address zero  or drop in a ~main()~ functions somewhere randomly and start there, we need to tell the linker what the code layout is though a custom *linker script*. First we tell it which parts are ROM and RAM with their respective sizes. ROM (Read Only Memory) is where the code and constants live, and RAM (Random Access Memory) is where the stack and heap live - the stuff that's dynamic

#+BEGIN_SRC c :tangle STM32F103RBTx_FLASH.ld
MEMORY
{
    rom (rx) : ORIGIN = 0x08000000, LENGTH = 128K
    ram (rwx) : ORIGIN = 0x20000000, LENGTH = 20K
}
#+END_SRC

Even give that, code on a microcontroller doesn't by default start at the first address of ROM and go from there (that's more or less how we conceptualize code running on an normal OS). A better way to think about the microcontroller is it's as a machine that recieves interrupt signals from external inputs and the chip responding by running code and then returning to whatever it was doing before. These interrupting inputs can be a clock running out, a peripheral wanting attention, an attached debugger wanting a halt, etc.

So instead of a ~main()~ or something, the first thing in ROM is a vector table - a table of pointers to the different *interrupt handlers* - ie. the code that is run when each interrupt happens. So we need to tell the linker that there will be a vector table
#+BEGIN_SRC c :tangle STM32F103RBTx_FLASH.ld
EXTERN(vector_table);
#+END_SRC
Here ~vector_table~ is  not a special keyword, it's just a label we are giving to the linker. It's written as =EXTERN=, meaning it has the label name now, but it'll look for its definition in our code, so we need to not forget to define this later on!

The first interrupt handler in this table will be special and it's the one that is triggered when the system is powered on, the user presses the reset button, or the code runs out of things to do. It's appropriately called the *reset handeler*

We also tell the linker that the code should start at the *reset handler*. Though as we'll see in the next section, this isn't stictly necessary because the reset handler is always the first interrupt handler in the vector table - so the microcontroller will know where to look for it by default.
#+BEGIN_SRC c :tangle STM32F103RBTx_FLASH.ld
ENTRY(reset_handler);
#+END_SRC
Again, this is just a symbol and the linker will look for its value in our code during linking.

Lastly we need to tell the linker that we want those vectors first in the ROM and aligned at the byte level (b/c the micro reads things in byte sized chucks - haha)
#+BEGIN_SRC c :tangle STM32F103RBTx_FLASH.ld
SECTIONS
{
    .text : {
        *(.vectors)
        *(.text*)
        . = ALIGN(4);
    } >rom
}
#+END_SRC
So the chip doesn't need to hunt for the vector table. It's always in the same spot - and the reset handler is as well.

** The Startup File (WIP)

The next part is to actually write the reset handler and to define the vector tables we just talked about and that the linker is expecting from us! The vector table will be set to some default values (and can be changed later) and we'll write the reset handler in a generic way that we can reuse between project. It will do some generic initializations and then at the end call to ~main()~. Then when we start a new project we can simply start writing a ~main()~ and skip all this initializations. In so doing we've split off these initializations into a separate *startup file* that we will reuse across projects.

#+BEGIN_QUOTE
*Note:* There is nothing special about this file for the compiler or linker - it's just another code file - and  you are free to copy it over to your other code files if you want!
#+END_QUOTE
#+BEGIN_SRC c :tangle startup_stm32f103xb.c
  void main(void);
  void __attribute__ ((weak, naked)) reset_handler(void) {
      (*(volatile unsigned int *)(0x40021018)) |= (1 << 4);

      (*(volatile unsigned int *)(0x40011004)) |= (0x00 << (((13 - 8) * 4) + 2));
      (*(volatile unsigned int *)(0x40011004)) |= (0x02 << ((13 - 8) * 4));
      main();
  }



  __attribute__ ((section(".vectors")))
  struct {
      unsigned int *initial_sp_value;
      void (*reset)(void);
      void (*nmi)(void);
      void (*hard_fault)(void);
      void (*memory_manage_fault)(void);
      void (*bus_fault)(void);
      void (*usage_fault)(void);
      void (*reserved_x001c[4])(void);
      void (*sv_call)(void);
      void (*debug_monitor)(void);
      void (*reserved_x0034)(void);
      void (*pend_sv)(void);
      void (*systick)(void);
      void (*irq[68])(void);
  } vector_table = {
      .reset = reset_handler,
  };
#+END_SRC
If you open up some startup files in templates provided by STM you will see that they're all written in assembly. The rational is that because the resulting code is always the same there no chance of the compiler doing something funny. However if you squint and look at the assembly you will see that the code is doing basically the same thing. It defined a reset handler which then calls a main.

Once we have the file we can add it to CMake
#+BEGIN_SRC cmake :tangle CMakeLists.txt
  enable_language(ASM)
  set(STARTUP_FILE "startup_stm32f103xb.c")
#+END_SRC
#+BEGIN_QUOTE
*TODO* Explain what's going on in more details
*TODO* Maybe split all of this generic stuff into a separate repository that can be pulled in with CMake. If I write a ~configure_elf()~ cmake function that will do all this messy stuff, it'd keep the parent project =CMakeLists.txt= a lot cleaner. 
#+END_QUOTE
#+BEGIN_QUOTE
  *            This module performs:
  *                - Set the initial SP
  *                - Set the initial PC == Reset_Handler,
  *                - Set the vector table entries with the exceptions ISR address
  *                - Configure the clock system   
  *                - Branches to main in the C library (which eventually
  *                  calls main()).
#+END_QUOTE
** The STM Libraries

Next we need actual libraries to write code with - otherwise we are kinda stuck writing assembly and poking at memory addresses with the datasheet. These are all provided in one bundle called *Cube* and it's on [[https://www.st.com/content/st_com/en/products/embedded-software/mcus-embedded-software/stm32-embedded-software/stm32cube-mcu-packages/stm32cubef1.html][the STM website]]. Here is a quick digest of what you get:

- The *BSP* has board specific peripheral libraries.. since we aren't using a board from STM - this really doesn't concern us.

- The *HAL* that comes from STM is the standard *Hardware Abstraction Layer*. It will be making some simplifying assumptions and do some stuff more automatically for you. I'm going to skip setting this up. Blinking a light should be pretty simple - so I'm shooting to get it working with simpler APIs

- Hidden inside of the *HAL* folder you will see files that are names =stm32f1xx_ll_*.c/h=. These actually form a seperate sub-library of sorts called the  *LL* API (for *Low Level*)

- The *CMSIS* ( Cortex Microcontroller Software Interface Standard ) : This library comes from ARM (/not STM/). It's split into several semi-independent components and provides a common base for all ARM devices (independent of vendor). The *HAL* and *LL API* are built on top of the *CMSIS*

Both the *HAL* and *CMSIS* need some chip-specific configuration - b/c while the API is standard, under the hood things will change from chip to chip (like memory addresses of things or clock information). I've bundled the *LL API* and the *CMSIS* together in a separate project [[https://geokon-gh.github.io/stm32f1-ll/index.html][stm32f1-ll]] ([[https://github.com/geokon-gh/stm32f1-ll/][github]]). It's also building with CMake so we can use it directly in our project (and you can skip registration and downloading the *Cube* thing). I recommend checking out that project's webpage for more details on how it works - but there is very little magic going on. 

The library bundle has been added as a submodule to this project, but if you forgot to clone recursively you can clone it right now into the project root with ~git clone https://github.com/geokon-gh/stm32f1-ll/~. Once we have it there we can just add it in

#+BEGIN_SRC cmake :tangle CMakeLists.txt
add_subdirectory(stm32f1-ll)
#+END_SRC

#+BEGIN_QUOTE
*Note*:in ~STM32Cube_FW_F1_V1.6.0/Middlewares~ there are additional libraries that sorta live on top of all of this and do more complicated stuff like TCP/IP USB..stuff and Filesystem things. Basically things that are kinda complicated you probably want to avoid writing yourself. I'm completely skipping this :)
#+END_QUOTE
  
** Our blinky code (WIP)

Next we can write a little program to blink a light and put it into =/src/main.c=

TODO: Write my own :)
Ripped directly from https://github.com/satoshinm/pill_blink/blob/master/bare-metal/pill_blink.c for now...

#+BEGIN_SRC c :tangle src/main.c
  int main(void){
      while(1) {
          (*(volatile unsigned int *)(0x40011010)) = (1 << 13);
          for (int i = 0; i < 1000000; ++i) __asm__("nop");

          (*(volatile unsigned short *)(0x40011014)) = (1 << 13);
          for (int i = 0; i < 500000; ++i) __asm__("nop");
      }
  }
#+END_SRC
Once there we can just add it as a special executable into our cmake
#+BEGIN_SRC cmake :tangle CMakeLists.txt
  add_executable(${PROJECT_NAME}.elf ${STARTUP_FILE}
    src/main.c)
  target_include_directories(${PROJECT_NAME}.elf PUBLIC inc)
#+END_SRC
and then link it to our library
#+BEGIN_SRC cmake :tangle CMakeLists.txt
  target_link_libraries(${PROJECT_NAME}.elf ll )
#+END_SRC
** The toolchain

Now that we have the code to start up the chip and the code to blink a light we just need to specify the compiler and flags we will run. I'm building using =gcc-arm-none-eabi= and its associated tools. I did this on a Debian system where this version of gcc can be installed from the repository (name =gcc-arm-none-eabi=)

Canonically this is done in a separate file so that you can subsitute other possible toolchains (like for instance LLVM or custom versions of GCC). We won't be doing that here, but for the sake of convention I've written these configurations to a =toolchain.cmake=

#+BEGIN_SRC cmake :tangle toolchain.cmake
  set(CMAKE_SYSTEM_NAME Generic) # 'Generic' is used for embedded systems

  set(CMAKE_C_COMPILER arm-none-eabi-gcc)
  set(CMAKE_CXX_COMPILER arm-none-eabi-g++)
  set(CMAKE_ASM_COMPILER arm-none-eabi-gcc)

  # tells CMake not to try to link executables during its interal checks
  # things are not going to link properly without a linker script
  set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)

  set(CMAKE_OBJCOPY arm-none-eabi-objcopy)
  set(CMAKE_OBJDUMP arm-none-eabi-objdump)
  set(CMAKE_SIZE arm-none-eabi-size)
  set(CMAKE_DEBUGGER arm-none-eabi-gdb)
  set(CMAKE_DEBUGGER arm-none-eabi-gdb)
  set(CMAKE_CPPFILT arm-none-eabi-c++filt)
#+END_SRC
If you skip writing a toolchain file then CMake will default to the system compiler and things will start to slowly go wrong for you (it generally doesn't blow up into your face here)

Next we need to tell the linker what linker script to use (which is a bit ugly in CMake)

#+BEGIN_SRC cmake :tangle CMakeLists.txt
        set_target_properties(
          ${PROJECT_NAME}.elf
          PROPERTIES
          LINK_FLAGS
          "-T${PROJECT_SOURCE_DIR}/STM32F103RBTx_FLASH.ld \
           -Wl,--gc-sections \
           -Wl,-Map=${PROJECT_NAME}.map")
#+END_SRC

I'm appending this to the =CMakeLists.txt=, but it's maybe something that should be in the toolchain file.

I also added two more linker options (you can see it's a linker option b/c it starts with a =-Wl=)

- =--gc-sections= this tells the linker to remove unused code/data from the final executable. There is a pesky ~_exit()~ function referrence that will often get slipped into your executable by the compiler. B/c we are running on a microcontroller the code never exits (it can't quit and hand off executation to an OS after all!) so this exit needs to be removed by the linker. Otherwise the linker will complain you never defined an exit function.

- =-Map= prints a link map:
   + Where object files and symbols are mapped into memory.
   + How common symbols are allocated.
   + All archive members included in the link, with a mention of the symbol which caused the archive member to be brought in.

The link map is like a high-level overview of how your code looks like

More linker options are explained in details here: https://ftp.gnu.org/old-gnu/Manuals/ld-2.9.1/html_node/ld_3.html


We then also need to let the compiler know our target architecture and some compiler options (taken from [[https://github.com/PurpleAlien/stm32-minimal/blob/master/Makefile][PurpleAlien]])

#+BEGIN_SRC cmake :tangle CMakeLists.txt
  target_compile_options(${PROJECT_NAME}.elf PUBLIC
    -Wall 
    -g 
    -std=gnu99 
    -Os
    -mthumb
    -mcpu=cortex-m3
    -mfloat-abi=soft
    -mlittle-endian
    -ffunction-sections 
    -fdata-sections
    -Werror 
    -Wstrict-prototypes 
    -Warray-bounds 
    -fno-strict-aliasing 
    -Wno-unused-const-variable 
    -specs=nano.specs 
    -specs=nosys.specs)
#+END_SRC
*TODO* Explain all of these...

* Getting the code on the chip
** Building

At this point we have all the files we need to build the code, so just go to a new empty directory and run

#+BEGIN_SRC
  cmake -DCMAKE_TOOLCHAIN_FILE=path/to/source/toolchain.cmake /path/to/source/
  make
#+END_SRC

Now in the build directory you'll have some build garbage, the link map =blinky.map= and =blinky.elf= - which is the code/executable that we want to get onto the bluepill.

** OpenOCD
The standard open source software for flashing the bluepill is OpenOCD. On fancier/more-expensive boards there will be a secondary chip that helps you flash the microcontroller. But on cheaper and more practical chips this part is omitted (b/c in a sense it's a waste to have the same chip on every single board). So to flash the bluepill you will need something to do the flashing with. I'm using a knock off =ST-LINK v2= I purchased on Taobao. (note the wiring is in a different order on the board and programmer)

[[file:st-link.jpeg]]

OpenOCD will provide us with an abstraction layer. It will communicate over JTAG or SWD or something to the chip and present us with a standard GDB server. Once it's setup we don't need to deal with the particulars of the how the chip is flashed. We simply go into GDB and tell GDB to upload new code and everything happens automatically for us behind the scenes.

Ofcourse the trick is to setup OpenOCD first :)

The software setup is rather baroque and not very obvious - but the [[http://openocd.org/documentation/][documentation]] is very thorough. You start from the beginning and just read very carefully sequentially and it will all make sense. Fortunately for us - the hardware we're using is very standard so we can use some already provided templates. When I install OpenOCD on my Debian system through ~apt-get install openocd~ the templates are in =/usr/share/openocd/scripts/board/=. After browsing some similar boards (like the stm32f4disovery) you kinda get the picture of how the configuration file should look (*THESE VALUES CHANGE BETWEEN POINT RELEASE OF OPENOCD. DOUBLE CHECK IF YOU HAVE ISSUE*)

#+BEGIN_SRC c :tangle openocd.cfg
source [find interface/stlink-v2.cfg]

transport select hla_swd

source [find target/stm32f1x_stlink.cfg]

reset_config none
#+END_SRC

and we have this saved to a =openocd.cfg=. For convenience we should also tell CMake to copy this file over to the build directory (where we need it when running openocd)

#+BEGIN_SRC cmake :tangle CMakeLists.txt
file(COPY
  openocd.cfg
  DESTINATION
  ${CMAKE_BINARY_DIR})
#+END_SRC

Now in our build directory we simply run ~openocd~ are *root* and it should launch the GDB server. It automatically will detect the ST-LINK V2 USB device in your USB port and then connect to the chip you have connected up. If something is misconfigured of not connected you can piece it together from the errors it gives back to you. Once everything is working you should have an output that looks something like

#+BEGIN_SRC
$ openocd
Open On-Chip Debugger 0.10.0
Licensed under GNU GPL v2
For bug reports, read
        http://openocd.org/doc/doxygen/bugs.html
Info : auto-selecting first available session transport "hla_swd". To override use 'transport select <transport>'.
Info : The selected transport took over low-level target control. The results might differ compared to plain JTAG/SWD
adapter speed: 1000 kHz
adapter_nsrst_delay: 100
none separate
srst_only separate srst_nogate srst_open_drain connect_deassert_srst
Info : Unable to match requested speed 1000 kHz, using 950 kHz
Info : Unable to match requested speed 1000 kHz, using 950 kHz
Info : clock speed 950 kHz
Info : STLINK v2 JTAG v17 API v2 SWIM v4 VID 0x0483 PID 0x3748
Info : using stlink api v2
Info : Target voltage: 2.911807
Info : stm32f1x.cpu: hardware has 6 breakpoints, 4 watchpoints
#+END_SRC
.. and then it sorta just hangs\\
What's actually happening is that the GDB server is running in the background and you can connect to it.
#+BEGIN_QUOTE
*Note* I tried using the latest OpenOCD from the respository and it had some very weird unpredictable behavior (maybe was playing funny with my system OpenOCD). I'd look into this only if you system repository OpenOCD is older than 0.10.0 - b/c I've confirmed it works at this version

I also have strange power issue... it would on occassion not detect the chip or disconnect. I don't have any immediate suggestions other than turning it off and on again till it works..
#+END_QUOTE

** GDB

To test the GDB server you now need to make sure you have the right GDB installed. On Debian for some reason there is no ~arm-none-eabi-gdb~ package on testing/buster. So you can just install the whole GCC toolchain from ARM's website (assuming you're running on a x64 machine): https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads

Once you have it installed you need to run ~arm-none-eabi-gdb~ in our build directory and start a GDB session. The next few steps will connect to the OpenOCD server, stop the program running on it, unlock the chip, and load our new program

#+BEGIN_SRC 
> target remote localhost:3333
> monitor reset halt
> monitor stm32f1x unlock 0
> load blinky.elf
#+END_SRC

Then you can reset the chip and it should be running your code!


*** toolchain quirks
*Note:* Interestingly if I have my toolchain file pointing at the precompiled GCC files from ARM, my final =elf= file ends up looking different when I flash the chip

Using ARM's precompiled GCC =v.7.3.1= :
#+BEGIN_SRC
(gdb) load blinky.elf
Loading section .isr_vector, size 0x10c lma 0x8000000
Loading section .text, size 0x4bc lma 0x800010c
Loading section .rodata, size 0x4 lma 0x80005c8
Loading section .init_array, size 0x8 lma 0x80005cc
Loading section .fini_array, size 0x4 lma 0x80005d4
Loading section .data, size 0x434 lma 0x80005d8
Start address 0x800017c, load size 2572
Transfer rate: 10 KB/sec, 428 bytes/write.
#+END_SRC

Using the Debian repository GCC =v.6.3.1=:
#+BEGIN_SRC
(gdb) load blinky.elf
Loading section .isr_vector, size 0x10c lma 0x8000000
Loading section .text, size 0x52c lma 0x800010c
Loading section .rodata, size 0x4 lma 0x8000638
Loading section .init_array, size 0x8 lma 0x800063c
Loading section .fini_array, size 0x4 lma 0x8000644
Loading section .data, size 0x434 lma 0x8000648
Start address 0x80003e4, load size 2684
Transfer rate: 10 KB/sec, 447 bytes/write.
#+END_SRC
